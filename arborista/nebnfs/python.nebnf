Module = statements: [Statement]
Statement = CompoundStatement | SimpleStatement

CompoundStatement = IfStatement | WhileStatement | ForStatement | TryStatement | WithStatement | FunctionDefinition | ClassDefinition | DecoratedDefinition | AsyncStatement
IfStatement = ...
WhileStatement = ...
ForStatement = ...
TryStatement = ...
WithStatement = ...
FunctionDefinition = ...
ClassDefinition = ...
DecoratedDefinition = ...
AsyncStatement = ...

SimpleStatement = SmallStatement (";" SmallStatement)* ";" Newline
SmallStatement = ExpressionStatement | DeleteStatement | PassStatement | FlowStatement | ImportStatement | GlobalStatement | NonlocalStatement | AssertStatement

ExpressionStatement = Expression
Expression = Ternary | Disjunction | Conjuction | Inversion | Comparison | LambdaDefinition | ... | Atom
Ternary = ...
Disjunction  = ...
Conjuction = ...
Inversion = ...

Comparison = left: Expression comparison_operator: ComparisonOperator right: Expression
ComparisonOperator = LessThan | GreaterThan | Equals | GreaterThanOrEquals | LessThanOrEquals | LessGreaterThan | NotEquals | In | NotIn | Is | IsNot
LessThan = '<'
GreaterThan = '>'
Equals = '=='
GreaterThanOrEquals = '>='
LessThanOrEquals = '<='
LessGreaterThan = '<>'
NotEquals = '!='
In = 'in'
NotIn = 'not' 'in'
Is = 'is'
IsNot = 'is' 'not'

LambdaDefinition = ...

Atom = Name | True | False | None | String | JoinedString | Bytes | JoinedBytes | Number | Tuple | Group | Generator | List | ListComprehension | Dict | DictComprehension | Set | SetComprehension | Ellipses

Name = ...
True = 'True'
False = 'False'
None = 'None'

String = prefix: [StringPrefix] value: (ShortString | LongString)
StringPrefix = value: ("f" | "r" | "u" | "F" | "R" | "U" | "fr" | "Fr" | "fR" | "FR" | "rf" | "Rf" | "rF" | "RF")
ShortString = SingleQuotedShortString | DoubleQuotedShortString
LongString = SingleQuotedLongString | DoubleQuotedLongString
SingleQuotedShortString = ...
DoubleQuotedShortString = ...
SingleQuotedLongString = ...
DoubleQuotedLongString = ...

JoinedString = strings: String+

Bytes = ...

JoinedBytes = bytes: Bytes+

Number = ...
Tuple = ...
Group = ...
Generator = ...
List = ...
ListComprehension = ...
Dict = ...
DictComprehension = ...
Set = ...
SetComprehension = ...
Ellipses = '...'

ExpressionList = ...

YieldExpression = "yield" ...

DeleteStatement = "del" ExpressionList
PassStatement = "pass"
FlowStatement = BreakStatement | ContinueStatement | ReturnStatement | RaiseStatement | YieldStatement

BreakStatement = "break"
ContinueStatement = "continue"
ReturnStatement = "return" expressions: [ExpressionList]
YieldStatement = YieldExpression
RaiseStatement = "raise" [exception: Expression ["from" source_excpetion: Expression]]

ImportStatement = value: ImportDottedName | ImportFrom

ImportDottedName = "import" dotted_names_as_names: DottedNameAsNames
DottedNameAsNames = first_dotted_name_as_name: DottedNameAsName rest_of_dotted_name_as_names: ("," DottedNameAsName)*
DottedNameAsName = dotted_name: DottedName "as" name: Name
DottedName = Name ("." Name)*

ImportFrom = "from" source: (DottedName | RelativeDottedname) "import" target: (Star | GroupedNameAsNames | NameAsNames)
RelativeDottedName = dots: (".")+ [dotted_name: DottedName]
Star = "*"
GroupedNameAsNames = "(" NameAsNames ")"
NameAsNames = first: NameAsName rest: ("," NameAsName)*
NameAsName = name: Name ["as" new_name: Name]

GlobalStatement = ...
NonlocalStatement = ...
AssertStatement = ...
