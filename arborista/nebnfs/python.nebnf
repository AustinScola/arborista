Module = statements: [Statement]
Statement = CompoundStatement | SimpleStatement

CompoundStatement = IfStatement | WhileStatement | ForStatement | TryStatement | WithStatement | FunctionDefinition | ClassDefinition | DecoratedDefinition | AsyncStatement
IfStatement = ...
WhileStatement = ...
ForStatement = ...
TryStatement = ...
WithStatement = ...
FunctionDefinition = ...
ClassDefinition = ...
DecoratedDefinition = ...
AsyncStatement = ...

SimpleStatement = SmallStatement (";" SmallStatement)* ";" Newline
SmallStatement = ExpressionStatement | DeleteStatement | PassStatement | FlowStatement | ImportStatement | GlobalStatement | NonlocalStatement | AssertStatement

ExpressionStatement = ...
Expression = ...

Comparison = left: Expression comparison_operator: ComparisonOperator right: Expression
ComparisonOperator = LessThan | GreaterThan | Equals | GreaterThanOrEquals | LessThanOrEquals | LessGreaterThan | NotEquals | In | NotIn | Is | IsNot
LessThan = '<'
GreaterThan = '>'
Equals = '=='
GreaterThanOrEquals = '>='
LessThanOrEquals = '<='
LessGreaterThan = '<>'
NotEquals = '!='
In = 'in'
NotIn = 'not' 'in'
Is = 'is'
IsNot = 'is' 'not'

ExpressionList = ...

YieldExpression = "yield" ...

DeleteStatement = "del" ExpressionList
PassStatement = "pass"
FlowStatement = BreakStatement | ContinueStatement | ReturnStatement | RaiseStatement | YieldStatement

BreakStatement = "break"
ContinueStatement = "continue"
ReturnStatement = "return" expressions: [ExpressionList]
YieldStatement = YieldExpression
RaiseStatement = "raise" [exception: Expression ["from" source_excpetion: Expression]]

ImportStatement = ...
GlobalStatement = ...
NonlocalStatement = ...
AssertStatement = ...
